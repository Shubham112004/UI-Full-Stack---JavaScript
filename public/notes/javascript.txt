													JAVASCRIPT [ES6+]
- Light weight, JIT [Just In Time] compiled programming language
- What is JIT?
	Compiling techniques :-
	1. JIT	[just in time]	-	the code is loaded in the browser and compiled in browser
	2. AOT 	[ahead of time]	-	the compilation is done in application itsel and the it is loaded in the browser
- Js supports various programming techniques and approches - functional progrsmming | structural progrsmming | imperative programming | object oriented programming etc..
- Js is NOT an OOP language , it supports only few features of OOP
- JS is used as- 
	- client side with html
	- server side with node.js
	- database with mongodb
	- animations with flash, 3DS max..

- Evolution of js - 
	first browser (mosaic) - GML, SGML - presentation | ECMA Script - client side
	1990 - Tim Berners Lee - HTML
	1994 - Netscape communications - Netscape Communicator - HTML - presentation & ECMA Script - not designed fot HTML so Netscape appointed "Brendan Eich" [developer at CERN lib] - named the script - Mocha - netscape changed the name to - Live Script - sun micro system - maintain it (Java specilist) - so they named it as - JavaScript
	1998 - microsoft - Win-98 - Internet Explorer
	2004 - Netscape Communicator - stops & gives Javascript to ECMA - ECMA named it as - ECMA Script

* Js with HTML (client side) -
	- to reduce burden on server by - handling validations client side | handling interactions client side | DOM manipulations -- adding/removing elements, rendering new data into elements, update data in elements, etc..

* Integrating Js into page -
	-inline | embeded | external file

* Refering HTML elements -
	1. Refering HTML elements by using DOM hierarchy -
		- it is faster in rendering
		- if you change position of any element in page, then every time you have to update its position.
	2. Refering HTML elements by using name -
		- you can access any element directly by using its reference name
		- you can't access child elements directly, you have to refer both parent and child hierarchy
	3. Refering HTML elements by using id -
		- document.getElementById()
		- you can access any child element without refering its parent
		- there will be conflict between css id and js id [every element cna be configured with only one id]
	4. Refering HTML elements by using css selectors -
		- document.querySelector()
			type | class | id...
		- can apply effects only to the first element, however it can handel data for multiple elements, also styles for multiple elements
	5. Refering HTML elements having common name -
		- document.getElementsByName()
	6. Refering HTML elements having common class name -
		- document.getElementsByClassName()
	7. Refering all HTML elements by using tag name -
		- document.getElementByTagName()

* Js Output techniques -
	- alert()
	- confirm()
	- console.log(), warn(), success(), error(), debug(), info(),...
	- innerText
	- innerHTML
	- outerHTML
	- document.write()

* Js Input technique -
	- prompt()
		- it is like alert with input
		- syntax- prompt('your msg', 'default msg');
		- returns:
			null -- on calcle
			"" [empty] -- on ok without value
			value -- on ok with value

	- form input elements
		- you can use form input elements like -
		textbox, password, number, email, radio, checkbox, listbox, dropdown, etc...
		- every form element must have reference id

** What is Strict mode of Js?
=> "use strict";
	strict mode for Js allows to reduce code inconsistency, so that developers have to follow coading standards
	<script>
	"use strict";
	x = 11;					//invalid - x is not defined | gives error
	document.write("x = "+x);
	<script>

	<script>
	x = 11;					//does not gives error
	document.write("x = "+x);
	<script>

	<script>
	"use strict";
	var x;
	x = 11;					//does not gives error
	document.write("x = "+x);
	<script>

**How to write Js for Legacy Browsers [old version browsers] ?
=> By enclosing the code in "HTML Comments" <!-- -->

Js Comment - // sinle line comment
			/* */ multi line comments

* Js Language Basics - 
	Varibles - storage locations in memory - can store a value & use it as a part of any expression | js allows to use varibles directly if it is not in strict mode
		in strict mode varible configuration contains 3 phases -
		a. Declaration		-	var x; [scope & name of varible]
		b. Assignment		-	x = 10; [rendering value into varible after declering]
		c. Initilization		-	var x = 10; [rendering value into varible while declering]

	varibles in js - var | let | const
		- var - defines function scope varible (you can declare in any block of a function and access from any another block in function) | var allows declering, assigning & initilization | allows shadowing & hoisting

** What is Shadowing?
=> process of re-declearing same name identifier within the scope

** What is hoisting?
=> it is a compiling technique, where compiler can find declerarion of varible before using it. Hense you can use a varible before declering.

		- let - defines block scope varible (accessible only in the block where it is declered or to its inner blocks) | let allows declering, assigning & initilization | NOT allow shadowing & hoisting

		- const - defines block scope varible | allows ONLY initilization (no declering & assigning) | NOT allow shadowing & hoisting

** Why we need a const?
=> const is required to initilize a memory
	at the time of loading  application or component memory is initilize with some default value (undefined)

** Can const change its value?
=> Dynamically YES - 
	const can be changed - 
					const username = prompt("Enter Name");
					document.write("Hello ! " + username);

Global scope for varible - you can declare a varible in module scope [module scope : <script></script> ] , so that it is global and accessible to all functions in module

** Can we declare a global varible inside function?
=> YES, by using browser "window" object
	syntax -
		function f1(){
			window.y = 20;
		}
		function f2(){
			document.write("y = "+y);
		}
		f2();

** To access a varible/function outside a module we use export - export var x = 10;

Varible naming - 
	must start with alphabet or underscore (to indiacte that varible not implemented, it requires further implementation) | other that _ no other special character allowed | length can't exceed more than 255 chars | don't use language keywords for varible name

	Data Types - it defines data structure | determines the size and type of data
		a) primitive - Immutable types (their structure will not change, have fixed range of value) use memory stack [LIFO]
			number | string | boolean | null | undefined
	Js is not strongly typed, it is implicitely typed language
			
			- Number type - Js number type refers to - signed integer		-10
											unsigned integer	10
											floating point		24.35 [max upto 2 decimal places & 2 integer value]
											double			132.25, 56.231 [more than 2 decimal places or more than 2 integer value]
											decimal			1235.2, 12.2564 [more than 3 decimal places or more than 3 integer value]
											exponent			2e3 [2x10^3]
											binary			0b101
											octa				7o42
											hexa				7f2d
					Js uses "isNaN()" method to verify the number type
						syntax - 
								if(isNaN(value)){
								}
					Js can't identify a numeric value in string format, you have to explicitly convert into number - 
						a) parseInt()
						b) parseFloat()
		
						eg - 
							var a = "10AB";
							var b = 20;
							var c = parseInt(a)+b;	//30
			
							var a = "AB10";
							var b = 20;
							var c = parseInt(a)+b;	//invalid - NaN

							var a = "10AB20";
							var b = 20;
							var c = parseInt(a)+b;	//10+20 = 30
					
			- String type - gropu of chars enclosed in 
						a) single quote	' '
						b) double quote	" "
						c) back tick	` `	document.write(`Hello ${username} You selected ${color} color for your design`);
										${} -- data binding expression
				escape sequence issues - special chars in a string can escape printing, you have to print the non-printable chars by using "\"

				String handling in Js -
					string formating methods -
					- bold()
					- italics()
					- sup()
					- sub()
					- fontcolor()
					- fontsize()
					- toUpperCase()
					- toLowerCase()
				
					string property - 
						- length - total no of chars

					string manipulation -
 						- charAt() - returns the character at specified index
						- charCodeAt() - returns the character ASCII code
						- toUpperCase()
						- toLowerCase()
						- slice() - extract chars between specified index
						- substr() - return specified number of chars from given index
						- substring() - return the chars from specific index in any direction
						- indexOf() - finds character in a string and returns its index position [if char not found - it returns -1]
						- lastIndexOf() - will return last occurance index
							welcome	- indexOf("e")	//1
							welcome	- lastIndexOf("e")  //6
						- startsWith()	] - these functions used to verify starting and ending chars in string
						- endsWith()	] - these functions return boolean true when string is starting or ending with specified chars
						- match() - used to verify and compare given string with any regular expresion, it returns true if string format is as per 								regular expression | in Js regular expression is enclosed in "/ /"
						- trim() - used to remove leading spaces in a string
						- split() - used to split the string at specified delimeter and return an array

** What is charCodeAt()?
=> charAt() returns char at specified index
	charCodeAt() returns its character code as per UTF standards - A=65, Z=90

** What is difference between slice(), substr() & substring()?
=> slice() - it can read chars between specified start and end index. if end is not defined then it will read upto end of string. end index must be grater than 		start index (can't read backward)
		slice(startIndex, endIndex);
     substr() - it can read specified number of chars form given index number
		substr(startIndex, countOfChars);
     substring() - it can read from specified index to any direction
		substring(srartIndex, endIndex);		//endIndex can be less than startIndex (can read backward)

			- Boolean type - used in desicion making | handle 2 values - true (1) & false (0)
		
			- Undefined type - it specifies that value is not supplied into reference | verified using "undefined" keyword | value is not supplied during 							copilation

** What is the difference between undefined and not-defined?
=> undefined - reference is there but value is not defined
     not-defined - reference is not defined

			- Null type -  it is an exception type [occurs at run time] | null indicates that value is not supplied during run time | verified using "null" 						keyword

			
		b) non-primitive - Mutable types (their structure can change, no fixed range of value) use memory heap [FIFO]
			array | object | map

			array - organizing in order and accessing in random order
			stack - organizing in order and accessing last one first [LIFO]
			queue - organizing in order and accessing first one lasr [FIFO]

			- Array type - 
				What is purpose of array - array is used in computer programming to reduce overhead and complexity | arrays will reduce overhead by 				storing values in sequential order & arrays will reduce complexity by storing multiple values under one name | arrays can handle any 				type of value | array size can be changed dynamically
				- few technologies can't allocate various types of memory in sequential order hence they restrict array to same type of values and size 					can't be changed dynamically [c, c++, java, .net...]
			- configure array
				1. declaring array : var arrayName;
				2. initilization of memory for array : var arrayName = []; OR var arrayName = new Array();
					you can also assign memory for array : var arrayName;
												   arrayName = [];

** What is the difference between array "[]" meta character and "Array()" constructor?
=> Array() constructor can define size for array, however size can be changed dynamically.

			- storing values into array -
				- values are stored and accessed from ann array by using property [property maps index in memory]
			- reading values from array - 
				- you can use reference of property :  values[0] / values["1"]...
				- by using array methods -
					- toString()	:	reads & returns all array elements in string format [,]
					- join()		:	reads & returns all array elements with custom delimeters
					- slice()		:	reads elements between specified index
					- filter()		:	returns all elements that match given condition
					- find()		:	returns only the first element that match given condition
					- map()		:	it is an iterator for processing elements - it can read elements from a collection in sequential order | it does 									not require any condition, initilization and counter

					- reading values by using loops and external iterators
						- for()
						- while()
						- do while()
						- for..in		//iterator of properties
						- for..of		//iterator of values

 Dynamically Creating and Adding DOM elements using Array
	- document.createElement("elementName");
	- appendChild();

**What type of data we can store in Array?
=> Array can handle any type of data, both primitive, non-primitive and functions

**Why we need a function in array?
=> Array is defined with function to handle call back mechanism (a technique where functions will execute according to situation)

Array destruction (ES5+)
	without destruction :-						with destruction:-
		var values = [10, "John"];						var values = [10, "John"];
		var sno = value[0];							var [sno, nm] = values;
		var nm = value[1];

-- functions in array must be anonymous [functions will not have a name] -- function(){}

Adding values into array - 
1. push()		:	add new values as last elements			arrayName.push("item1","item2");
2.unshift()		:	add new values as first elements		arrayname.unshift("item1","item2");
3.splice()		:	add new values at any specific position	arrayName.splice(startIndex, deleteCount, "item1","item2");

Removing values from array -
1.pop()		:	removes & returns the last item				arrayName.pop();
2.shift()		:	removes & returns the first item			arrayName.shift();
3.splice()		:	removes & returns item at specific index		arrayName.splice(startIndex, deleteCount);

Sorting array elements - 
1. sort()		:	it sorts the items in ascending order
2. reverse()	:	it sorts the items in reverse order of theri occurance

Searching for element in array - 
1. find()
2. filter()
3. indexOf()
4. lastIndexOf()

JSON - javascript object notation
Object type - Alan Kay
- to keep releted data and logic under onne reference
- object stores data in properties defines logic using function
- it is a key and value collection  [keys are string type and values can be any type] 
	syntax :
		let obj ={
				"key":value,
				key:value,
				key:function(){}
			     }
	the properties of an object can be accessed within object by using "this" keyword | outside object you can access with reference of any object name
	- object act as reusable template with sample data an logic which you can implement and customize according to requirement [also known as pseudo 	  class]
	- if object is representing a format of data (not logic) then it is known as JSON

Ajax Calls in js with fetch method - 
	- Ajax is asynchronous javascript and xml
	- it allows partial post back [it can post only a sepcific portion of page]
	- it uses XmlHttpRequest object
	- fetch() - uses asynchronous request for fetching data from API
		syntax - 
			fetch("url").then(function(){get data}).then(function(){convert data into json});