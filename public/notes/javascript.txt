													JAVASCRIPT [ES6+]
- Light weight, JIT [Just In Time] compiled programming language
- What is JIT?
	Compiling techniques :-
	1. JIT	[just in time]	-	the code is loaded in the browser and compiled in browser
	2. AOT 	[ahead of time]	-	the compilation is done in application itsel and the it is loaded in the browser
- Js supports various programming techniques and approches - functional progrsmming | structural progrsmming | imperative programming | object oriented programming etc..
- Js is NOT an OOP language , it supports only few features of OOP
- JS is used as- 
	- client side with html
	- server side with node.js
	- database with mongodb
	- animations with flash, 3DS max..

- Evolution of js - 
	first browser (mosaic) - GML, SGML - presentation | ECMA Script - client side
	1990 - Tim Berners Lee - HTML
	1994 - Netscape communications - Netscape Communicator - HTML - presentation & ECMA Script - not designed fot HTML so Netscape appointed "Brendan Eich" [developer at CERN lib] - named the script - Mocha - netscape changed the name to - Live Script - sun micro system - maintain it (Java specilist) - so they named it as - JavaScript
	1998 - microsoft - Win-98 - Internet Explorer
	2004 - Netscape Communicator - stops & gives Javascript to ECMA - ECMA named it as - ECMA Script

* Js with HTML (client side) -
	- to reduce burden on server by - handling validations client side | handling interactions client side | DOM manipulations -- adding/removing elements, rendering new data into elements, update data in elements, etc..

* Integrating Js into page -
	-inline | embeded | external file

* Refering HTML elements -
	1. Refering HTML elements by using DOM hierarchy -
		- it is faster in rendering
		- if you change position of any element in page, then every time you have to update its position.
	2. Refering HTML elements by using name -
		- you can access any element directly by using its reference name
		- you can't access child elements directly, you have to refer both parent and child hierarchy
	3. Refering HTML elements by using id -
		- document.getElementById()
		- you can access any child element without refering its parent
		- there will be conflict between css id and js id [every element cna be configured with only one id]
	4. Refering HTML elements by using css selectors -
		- document.querySelector()
			type | class | id...
		- can apply effects only to the first element, however it can handel data for multiple elements, also styles for multiple elements
	5. Refering HTML elements having common name -
		- document.getElementsByName()
	6. Refering HTML elements having common class name -
		- document.getElementsByClassName()
	7. Refering all HTML elements by using tag name -
		- document.getElementByTagName()

* Js Output techniques -
	- alert()
	- confirm()
	- console.log(), warn(), success(), error(), debug(), info(),...
	- innerText
	- innerHTML
	- outerHTML
	- document.write()

* Js Input technique -
	- prompt()
		- it is like alert with input
		- syntax- prompt('your msg', 'default msg');
		- returns:
			null -- on calcle
			"" [empty] -- on ok without value
			value -- on ok with value

	- form input elements
		- you can use form input elements like -
		textbox, password, number, email, radio, checkbox, listbox, dropdown, etc...
		- every form element must have reference id

** What is Strict mode of Js?
=> "use strict";
	strict mode for Js allows to reduce code inconsistency, so that developers have to follow coading standards
	<script>
	"use strict";
	x = 11;					//invalid - x is not defined | gives error
	document.write("x = "+x);
	<script>

	<script>
	x = 11;					//does not gives error
	document.write("x = "+x);
	<script>

	<script>
	"use strict";
	var x;
	x = 11;					//does not gives error
	document.write("x = "+x);
	<script>

**How to write Js for Legacy Browsers [old version browsers] ?
=> By enclosing the code in "HTML Comments" <!-- -->

Js Comment - // sinle line comment
			/* */ multi line comments

* Js Language Basics - 
	Varibles - storage locations in memory - can store a value & use it as a part of any expression | js allows to use varibles directly if it is not in strict mode
		in strict mode varible configuration contains 3 phases -
		a. Declaration		-	var x; [scope & name of varible]
		b. Assignment		-	x = 10; [rendering value into varible after declering]
		c. Initilization		-	var x = 10; [rendering value into varible while declering]

	varibles in js - var | let | const
		- var - defines function scope varible (you can declare in any block of a function and access from any another block in function) | var allows declering, assigning & initilization | allows shadowing & hoisting

** What is Shadowing?
=> process of re-declearing same name identifier within the scope

** What is hoisting?
=> it is a compiling technique, where compiler can find declerarion of varible before using it. Hense you can use a varible before declering.

		- let - defines block scope varible (accessible only in the block where it is declered or to its inner blocks) | let allows declering, assigning & initilization | NOT allow shadowing & hoisting

		- const - defines block scope varible | allows ONLY initilization (no declering & assigning) | NOT allow shadowing & hoisting

** Why we need a const?
=> const is required to initilize a memory
	at the time of loading  application or component memory is initilize with some default value (undefined)

** Can const change its value?
=> Dynamically YES - 
	const can be changed - 
					const username = prompt("Enter Name");
					document.write("Hello ! " + username);

Global scope for varible - you can declare a varible in module scope [module scope : <script></script> ] , so that it is global and accessible to all functions in module

** Can we declare a global varible inside function?
=> YES, by using browser "window" object
	syntax -
		function f1(){
			window.y = 20;
		}
		function f2(){
			document.write("y = "+y);
		}
		f2();

** To access a varible/function outside a module we use export - export var x = 10;

Varible naming - 
	must start with alphabet or underscore (to indiacte that varible not implemented, it requires further implementation) | other that _ no other special character allowed | length can't exceed more than 255 chars | don't use language keywords for varible name

	Data Types - it defines data structure | determines the size and type of data
		a) primitive - Immutable types (their structure will not change, have fixed range of value) use memory stack [LIFO]
			number | string | boolean | null | undefined
	Js is not strongly typed, it is implicitely typed language
			
			- Number type - Js number type refers to - signed integer		-10
											unsigned integer	10
											floating point		24.35 [max upto 2 decimal places & 2 integer value]
											double			132.25, 56.231 [more than 2 decimal places or more than 2 integer value]
											decimal			1235.2, 12.2564 [more than 3 decimal places or more than 3 integer value]
											exponent			2e3 [2x10^3]
											binary			0b101
											octa				7o42
											hexa				7f2d
					Js uses "isNaN()" method to verify the number type
						syntax - 
								if(isNaN(value)){
								}
					Js can't identify a numeric value in string format, you have to explicitly convert into number - 
						a) parseInt()
						b) parseFloat()
		
						eg - 
							var a = "10AB";
							var b = 20;
							var c = parseInt(a)+b;	//30
			
							var a = "AB10";
							var b = 20;
							var c = parseInt(a)+b;	//invalid - NaN

							var a = "10AB20";
							var b = 20;
							var c = parseInt(a)+b;	//10+20 = 30
					
			- String type - gropu of chars enclosed in 
						a) single quote	' '
						b) double quote	" "
						c) back tick	` `	document.write(`Hello ${username} You selected ${color} color for your design`);
										${} -- data binding expression
				escape sequence issues - special chars in a string can escape printing, you have to print the non-printable chars by using "\"

				String handling in Js -
					string formating methods -
					- bold()
					- italics()
					- sup()
					- sub()
					- fontcolor()
					- fontsize()
					- toUpperCase()
					- toLowerCase()
				
					string property - 
						- length - total no of chars

					string manipulation -
 						- charAt() - returns the character at specified index
						- charCodeAt() - returns the character ASCII code
						- toUpperCase()
						- toLowerCase()
						- slice() - extract chars between specified index
						- substr() - return specified number of chars from given index
						- substring() - return the chars from specific index in any direction
						- indexOf() - finds character in a string and returns its index position [if char not found - it returns -1]
						- lastIndexOf() - will return last occurance index
							welcome	- indexOf("e")	//1
							welcome	- lastIndexOf("e")  //6
						- startsWith()	] - these functions used to verify starting and ending chars in string
						- endsWith()	] - these functions return boolean true when string is starting or ending with specified chars
						- match() - used to verify and compare given string with any regular expresion, it returns true if string format is as per 								regular expression | in Js regular expression is enclosed in "/ /"
						- trim() - used to remove leading spaces in a string
						- split() - used to split the string at specified delimeter and return an array

** What is charCodeAt()?
=> charAt() returns char at specified index
	charCodeAt() returns its character code as per UTF standards - A=65, Z=90

** What is difference between slice(), substr() & substring()?
=> slice() - it can read chars between specified start and end index. if end is not defined then it will read upto end of string. end index must be grater than 		start index (can't read backward)
		slice(startIndex, endIndex);
     substr() - it can read specified number of chars form given index number
		substr(startIndex, countOfChars);
     substring() - it can read from specified index to any direction
		substring(srartIndex, endIndex);		//endIndex can be less than startIndex (can read backward)

			- Boolean type - used in desicion making | handle 2 values - true (1) & false (0)
		
			- Undefined type - it specifies that value is not supplied into reference | verified using "undefined" keyword | value is not supplied during 							copilation

** What is the difference between undefined and not-defined?
=> undefined - reference is there but value is not defined
     not-defined - reference is not defined

			- Null type -  it is an exception type [occurs at run time] | null indicates that value is not supplied during run time | verified using "null" 						keyword

			
		b) non-primitive - Mutable types (their structure can change, no fixed range of value) use memory heap [FIFO]
			array | object | map

			array - organizing in order and accessing in random order
			stack - organizing in order and accessing last one first [LIFO]
			queue - organizing in order and accessing first one lasr [FIFO]

			- Array type - 
				What is purpose of array - array is used in computer programming to reduce overhead and complexity | arrays will reduce overhead by 				storing values in sequential order & arrays will reduce complexity by storing multiple values under one name | arrays can handle any 				type of value | array size can be changed dynamically
				- few technologies can't allocate various types of memory in sequential order hence they restrict array to same type of values and size 					can't be changed dynamically [c, c++, java, .net...]
			- configure array
				1. declaring array : var arrayName;
				2. initilization of memory for array : var arrayName = []; OR var arrayName = new Array();
					you can also assign memory for array : var arrayName;
												   arrayName = [];

** What is the difference between array "[]" meta character and "Array()" constructor?
=> Array() constructor can define size for array, however size can be changed dynamically.

			- storing values into array -
				- values are stored and accessed from ann array by using property [property maps index in memory]
			- reading values from array - 
				- you can use reference of property :  values[0] / values["1"]...
				- by using array methods -
					- toString()	:	reads & returns all array elements in string format [,]
					- join()		:	reads & returns all array elements with custom delimeters
					- slice()		:	reads elements between specified index
					- filter()		:	returns all elements that match given condition
					- find()		:	returns only the first element that match given condition
					- map()		:	it is an iterator for processing elements - it can read elements from a collection in sequential order | it does 									not require any condition, initilization and counter

					- reading values by using loops and external iterators
						- for()
						- while()
						- do while()
						- for..in		//iterator of properties
						- for..of		//iterator of values

 Dynamically Creating and Adding DOM elements using Array
	- document.createElement("elementName");
	- appendChild();

**What type of data we can store in Array?
=> Array can handle any type of data, both primitive, non-primitive and functions

**Why we need a function in array?
=> Array is defined with function to handle call back mechanism (a technique where functions will execute according to situation)

Array destruction (ES5+)
	without destruction :-						with destruction:-
		var values = [10, "John"];						var values = [10, "John"];
		var sno = value[0];							var [sno, nm] = values;
		var nm = value[1];

-- functions in array must be anonymous [functions will not have a name] -- function(){}

Adding values into array - 
1. push()		:	add new values as last elements			arrayName.push("item1","item2");
2.unshift()		:	add new values as first elements		arrayname.unshift("item1","item2");
3.splice()		:	add new values at any specific position	arrayName.splice(startIndex, deleteCount, "item1","item2");

Removing values from array -
1.pop()		:	removes & returns the last item				arrayName.pop();
2.shift()		:	removes & returns the first item			arrayName.shift();
3.splice()		:	removes & returns item at specific index		arrayName.splice(startIndex, deleteCount);

Sorting array elements - 
1. sort()		:	it sorts the items in ascending order
2. reverse()	:	it sorts the items in reverse order of theri occurance

Searching for element in array - 
1. find()
2. filter()
3. indexOf()
4. lastIndexOf()

JSON - javascript object notation
Object type - Alan Kay
- to keep releted data and logic under onne reference
- object stores data in properties defines logic using function
- it is a key and value collection  [keys are string type and values can be any type] 
	syntax :
		let obj ={
				"key":value,
				key:value,
				key:function(){}
			     }
	the properties of an object can be accessed within object by using "this" keyword | outside object you can access with reference of any object name
	- object act as reusable template with sample data an logic which you can implement and customize according to requirement [also known as pseudo 	  class]
	- if object is representing a format of data (not logic) then it is known as JSON

Ajax Calls in js with fetch method - 
	- Ajax is asynchronous javascript and xml
	- it allows partial post back [it can post only a sepcific portion of page]
	- it uses XmlHttpRequest object
	- fetch() - uses asynchronous request for fetching data from API
		syntax - 
			fetch("url").then(function(){get data}).then(function(){convert data into json});

- Map type -
	- similar to object with key and value collection

** What is the difference between Map & Object?
=> 	Object										Map
	-----------------------------------------------------------------------------------------------------
	1. key & value collection					1. key & value collection
	2. key is only string type					2. key can be anyu type
	3. need expicit iterators to read				3. it provides implicit iterators
		key & values							to read keys & values
		for..in for..of							keys(), values(), entries()
	4. slow in accessing						4. faster than object
	5. size of keys is unknown					5. allows to access size of keys

Map methods - 
	1. set()	:	adds a new value
	2. get()	:	fetch the value by using key reference
	3. keys()	:	returns all keys
	4. values()	:	returns all values
	5. entries():	returns both key and values
	6. delete()	:	deletes specific key
	7. clear()	:	deletes all entries

- Date type -
	JS date values are defined by using "Date()" constructor [it loads the current date and time into memory]
		var now = new Date();
	you can configure any specific date and time by using date value in constructor
		var now = new Date("2004-01-01");
	you can access the date and time valuesby using following methods -
		getHours()	:	returns hour in 24 hr format
		getMinutes()	:	returms minutes number 0-59
		getSeconds()	:	returns seconds number 0-59
		getMiliSeconds()	:	returns mili seconds number 0-99
		getDate()		:	returns date number [27]
		getDay()		:	returns weekday number [0=sunday]
		getMonth()	:	returns month number [0=jan]
		getFullYear()	:	returns year number [2004]
		toLocalDateString()	:	returns complete date
		toLocalTimeString()	:	returns complete time
		
	Js provides following methods for setting a new date or time
		setHours()
		setMinutes()
		setSeconds()
		setMiliSeconds()
		setDate()
		setMonth()
		setYear()

	Js Timmer Events -
		setInterval()	:	used to perform specified task repeatedly at given time interval
		clearInterval()
		setTimeout()
		clearTimeout()

			setInterval(functionName, timeInterval);
		according to - Clock : 100 mili seconds = 1 sec & CPU : 1000 mili seconds = 1 sec

- Regular Expression type -
	- reuglar expression is a group of meta characters and quantifiers enclosed in "/ /"
		let regExp /\+91[0-9]{10}/;
	- regular expression is verified by using "match()" method
		let mobile = "+919604900934";
		if(mobile.match(regExp)){
		}

- Math Object -
	- it provides set of properties & methods to handle mathematical operations
	Math.PI()
	Math.sqrt()
	Math.sin()
	Math.tan()
	Math.pow()
	Math.round()
	Math.random() etc...

- Js Operators
	based on operands : 
		1. unary operator
			x++, --y,..
		2. binary operator
			x+y, x*y,...
		3. ternary operator
			? :
			(condition)?if_true:if_false
	based on type of value they return : 
		1. arithmetic operator	:	number			[+, -, *, /(returns quotient), %(returns reminder), **, ++, --]
		2. conditional operator	:	boolean			[==, ===, !==, !=, >, >=, <, <=]
		3. logical operaotrs		:	boolean			[&&, ||, !]
		4. assignment operators	:	number			[+=, -=, *=, /=, %=]
		5. bitwise operator		:	binary			
		6. special operators		:	vary in functionality	[typeof [it's a keyword], instanceof [it's a objec](used to check class name, from where the 													given instance is derived), in (used to verify existance of any property in object), of (used to 												read all values of a collection using iterator [for..of], void (discards the return value), ternary 												operator "? :"]

	in case of arithmetic operators -
	- any operation with undefined is NaN except string
	- any opertaion with null will return number except string

** What is the difference between =, ==, === operators?
=> =		to assign a value
     ==	to compare 2 values of different types
    ===	to compare 3 values of same types
- all comparision operators return boolean value (true/false)

** What is the difference between break and return?
=> Both are jump statements
	"break" will terminate the block but will stay in script
	"return" will terminate the script

JS Statements - used to control execution flow

	1. selection statements - if, else, switch, case, default

[lect67]
** Can we define switch without default?
=> Yes. Without default there will be no alternative to execute

** Can we define default above or before case?
=> Yes.

** Can we define case wihtout break?
=> Yes. But execution continues to next case and stops when break occured or will stop at the end of switch

** Can we define case with return as jump statement?
=> Yes.

** What is difference between break and return?
=> break will stop and stays in script & return will stop the script it quits the block

** Can we define value as string type?
=> Yes. but case senstive

** How to handle multiple case values for a set of statements?
=> a) you can define multiple cases for one block
     b) you can change the capitilization for text

** How to define case for range of values?
=> by using boolean expression then switch can have only boolean true | if multiple conditions are matching, then it will execute only the first

** Can we define "if" condition in switch case?
=> Yes

** Can we define a switch inside case?
=> No not recommanded (abnormal behiviour)  insted write it a function and call it using function

	2. Looping Control & Iteration Statements
		- for, while, do while
		- "for" loop - used when the exact iterations are known to developer and iterartion count will not change dynamically [but in js using array we can change count 			dynamically so all loops in js are same] | requires initilization, condition & counter | initilization, condition & counter values are optional in 'for' decleration 			(i.e. we can declare those inside, outside the for loop also - for( ; ; ){} )
		- "while" loop - used when iterations are unknown & iteration counter may change dynamically
		- "do while" loop - similar to while loop but ensures that the statements are executes atleast once even when the condition is false 

		Iterators -  used to read elements from a collection in sequential order | does not require initilization, condition, counter
			- for.. in [to read all properties from collection]
			- for.. of [to read all values from collection]

	3. jump statements
		- continue - it skips the current counter and continues to next counter
		- break
		- return 
		
** What is difference between loop & recursion?
=> 

Exception Handling Statements -  

** What is the purpose of exception handling?
=> used to avoid abnormal termination

- js exception handling statements are - 
	try		- monitering block. it contains statements to execute
	catch	- it is a handler block. it will catch the execption thrown by the application
	throw	- it explicitely throws exception & message
	finally	- it comprises of statements to execute in all situations

Javascript Functions - used for refactor [a technique used to extract set of statements into function]
	- allows encapsulation & reusability
	- function configuration comprises of -
		decleration : function FunctionName(paramaters)
		signature : FunctionName(paramaters)
		defination : {}
	- paramaters passed in decleration of function - formal paramaters
	- paramaters passed in function calling - actual paramater

** What is formal paramater?
** What is actual paramater?
** How a function is called?
=> By using its signature

- function can be paramaterless or paramaterized | function requires paramaters in order to modify  the functionality | function can have multiple paramaters | functional paramater have order dependency | function can have any type of paramaters (primitive or non-primitive)

rest paramater - [ES5+]
- a single rest paramater can allow multiple arguments
- a rest paramater is defined by using "...paramaterName"
	syntax - 
		function Name(...restParam)
		{
		}
		Name(arg1, arg2, arg3)
- every function can have only one paramater
- rest paramater must be last paramater in formal list

** Why rest paramater must be last paramater?
** Why function can't have multiple rest paramaters?

- Function with return type defined -
- function usually discards the return type, hence memory is only allocated to perform functionality
- if a function is defined with "return" along with functionality, then it can allocate memory to store the results returned by function
	function Name()
	{
		return operation;
	}
- if return is not using any operation then it is used to terminate the execution [any statement defined after return statement, is not reachable]

** Can we define return keyword in a function that does not return value?
=> Yes. it os used as jump statement

	function f1(a,b){
		return
		a+b;		// un-reachable code
	}
	f1(2,3)	=> gives undefined

- Function Recursion - technique of calling a function within the context of current function
- Function Closure - technique of configuring a function inside another function [allows outer function to access the members of inner function]

- Anonymous Function [function without name] - used in call backs (a technique of accessing function & loading according to state and situation)

- Arrow Functions - used to define function in short-hand technique (you can minify the function decleration & defination)
	()	:	configure function with paramaters
	=>	:	configure return value
	{}	:	configure set of statements
	
		function hello(msg){				var hello = msg => `Hello! ${msg}`;
			return `Hello! ${msg}`;
		}

		function welcome(){						var welcome = () =>document.write("Welcome to Js");
			document.write("Welcome to Js");
		}

		function add(a,b){				var add = (a,b) => a+b;
			return a+b;
		}

		function Print(){					var Print = () => {document.write("statemet1"); document.write("statemet2");}
			document.write("statemet1");
			document.write("statemet2");
		}
	also called as LAMBDA fun/expression

Js OOP - [Johan Oly & Kristian Nygaard] 

** Is Js OOP lang?
=> No. it suooorts some features of oop

Genereal - 
Features of OOP -
- sode reusability | code seperation | code extensibility | code security
& Characterstics of OOP -
- inheritance | encapsulation | polymorphism | abstraction

- Modules in Js - set of functions, values & classes | modules are used to build library for application & you can import and implement the library in your project
	module provides - 
		reusability | maintainability | testability | extensibality | seperation
	- the script type for module system must be defined as "module"	:	<script type="module"><script>
	- every module can have a default member to export (the default member is directly imported) & every module can have one default
	- you can't define directly constant value & DoM in module

- Class in OOP - it is a program template | a class comprises of sample data and logic which you can implement and customize accoridng to requirements

** Why we can't have varible and function in a class?
=> Varible and functions are immutable and as calss is a template it only contains muttable members

Configuring calss :
1. Class decleration - is used for classes that are requested according to requrinment
	class className{
	}
2. Class expression - is used for classes that are loaded according to state and situation
	var refName = class { };

Class Members -
	1. properties - references in calss memory where you can store data [data is stored in property & you can store any type of data (primitive and non primitive)
	2. methods
	3. accessors
	4. constructors

** What is difference between varibles and property?
=> varibles are immutable and properties are muttable

** What is difference between function and methods?
=> functions are immutable and methods are muttable

class className {
	Property = value;
	}
- in order to access members of a class, you have to create an instance for class -
	let instance = new className;

-"new" is a operator used for allocating memory dynamcally

- properties are mutable, you can control behaviour of property using "accessors"

- Accessors - define restrictions for reading and writing data into properties
	accessors - 
		get() [getter] - used for reading values from a property
		set [setter] - used for writing data into property

- Methods - define the actions to perform | all method specificatoin are similar to functions

- Constructor - it is a special type of method in calss used for instantiation (creating of object) | it initilizes memory to store values at the time of allocating memory for calss | constructor is a sub routine that executes automatically for every object
- in js constructor is anonymous [without name] | class name is used for constructor implicitly | it is defined by using "constructor" keyword
- js class can't overload constructor (i.e. a class can have only one constructor)
- js class can't have private constructor
- js calss can't have static constructor

Code Reusability - 
	a) Aggregation	
		- used to access the code of one calss in another by using an instance of calss | it is reffered as "Has-A-Relation" (without configuring relation between classes, you can access members of one class in another class)
	b) Inheritance [single & multi level NOT multiple]
		- in this a calss can extend another calss (configuring relation between classes) - reffered as Is-A-Relation
		- members of base class are accessible in derived calss by using "super" keyword

** Why multiple inheritance is not supported for classes?
=> because of constructor deadlock [deadlock is a situation where ever yconsturctor waits for each other]

Polymorphism - it is ability of component to change its behaviour according to state and situation | it is a single base calss object using memoey of multiple derived classes

JavaScript Browser Events - 
	- event is a message sent by sender to suscriber in order to notify the cahnge 
		onclick	=>	event
		onclick="InsertClick()"	=>	event handler
	- every event handler contains default arguments -
		a) this	:	contains information about object [button]
		b) event	:	contains information about event [onclick]
	- object information contains
		name, id, class, value,..
	- event information contains 
		clientX, clientY, keyCode, charCode, which,...
	- event arguments
		default arguments [this, e]
		custom arguments

- categories of Browser Events - 
	1. keyboard events - handle interactions with regard to keys
		onkeyup()		-		actions when key is relesed
		onkeydown()		-		actions when user hold down a key
		onkeypress()		-		actions when user keys-in another key
		
		event properties - 
			keyCode		-		returns code of every key ASCII [A=65 to Z = 90]
			charCode		-		code as per UTF standards [only char keys]
			which		-		similar to keyCode [enchanced keyboards]
			shiftKey		-		]
			ctrlKey		-		]- return true or false
			altKey		-		]

	2. mouse events - 
		onmouseover		-		actions when pointer is over element
		onmouseout		-		actions when pointer move out of element
		onmousedown		-		actions when mouse button is down
		onmouseup		-		actions when mouse button is released
		onmousemove		-		actions while mouse pointer is moving over elements

		event properties -
			clientX		-		gets X position
			clientY		-		gets Y position

	3. Clipboard events -
		oncut			-		removed and kept in keyboard
		oncopy			-		copied to clipboard
		onpaste			-		inserted from clipboard

** How to disable right click, cut, copy and paste like options in page?
=> By disabling the event handler. You can disable event handler by returning false
		oncut = return false
		oncontextmenu	:	for right click
		onselect			:	for selection
		onselectstart		:	for extending selector 

	4. Button events -
		onclick			:	single click
		ondblclick		:	double click
		oncontextmenu	:	right click

** How to handle click event for <a> element?
=> <a href="javascript:function()"></a>

	5. Form evelts -
		onsubmit			:	defines actions when form is submitted 
		onreset			:	defines actions when form resets

	- these are the events written for <form> element, but they require a submit and reset button in form

** How a form can be submitted on any another element event other than submit button?
=> By using "form.submit()" method

** Can a form have multiple submit buttons?
=> Yes

** Why you need multiple submit buttons? as all submit butons do same work?
=> You can submit to varipus api or you can handle multiple functionalities

** Form can have only one "onsubmit" then how it will manage various functionalities?
=> By accessing submit button value

	6. Focus events -
		onfocus			:	when element gets focus
		onblur			:	when element lost focus

	7. Miscellaneous events -
		onchange			:	when value changes
		onselect			:	when selected

	8. Touch events -
		ontouchstart
		ontouchend
		ontouchmove

	9. Timmer events -
		setinterval()		:	it performs specified task at regular time intervals | it is kept in the memory and sent to process | it is not removed from memory hence it 							repeats until cleared from memoty
							setInterval(functionName, interval);
		clearInterval()		:	it clears the task form memory
							clearInterval(functionReferenceName);
		setTimeout()		:	it makes any task inactive for specific duration of time & invokes after the time interval | it can execute the given task only once for 								every object
							setTimeout(functionName, interval);
		clearTimeout()		:	it clears the task from memory and will not allow to execute
							clearTimeout(refOfFunction);

JavaScript Browser Objects -
	set of objects to control browser -
		a) window		-	it provides properties & methods that are used to control browser window - open() | close() | print()
		b) location	-	it provides properties & methods to control browser location details - 
						host		-	returns server name or IP address
						port		-	returns port number
						protocol	-	returns the protocol
						href		-	gets and sets url dynamically
						hash		-	gets the current reference "id"
						search	-	gets the quqry string
						reload	-	refresh the page
						pathname	-	gets the current file path

** How to access the current location details?
=> location.hash : it is used to access the current location by using "id" reference | it can access a named location within the page

		c) navigator	-	used to access current browser details
						it includes - 
							browser family | version | plugin's | mime types | geo location, etc...
						properties -
							appName
							language
							platform
							plugins[]
							mimeTypes[]
							userAgent
							cookieEnabled , etc...

** How to get the status of Js in browser?
=> by using html element - <noscript>

**How to get MIME types?
=> <script>
	function f1(){
		for(var item of navigator.mimeTypes){
			document.write(item.type + "<br>");
		}
	}
	f1();
     </script>

** How to access Geo Location?
=> By using "geolocation.getCurrentPosition()"

		d) history		-	it is used to access browser history details
						history.length		:	returns total count of pages in history
						history.back()		:	moves to previous page in browser history
						history.forward()	:	moves to next page in browser history
						history.go()		:	moves to specific page in browser history

		e) document [DOM]